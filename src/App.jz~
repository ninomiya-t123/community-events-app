// src/App.js
import React, { useState } from "react";
import Login from "./components/Login";
import EventList from "./components/EventList";
// import EventForm from "./components/EventForm";
import EventProposalForm from "./components/EventProposalForm";
import Modal from "./components/Modal";
import PendingEventList from "./components/PendingEventList";

function App() {

  // ログイン画面用 state
  const [userRole, setUserRole] = useState(null); // "admin", "user", "guest"
  const [username, setUsername] = useState("");

  // メッセージ表示用 state
  const [message, setMessage] = useState("");

  // イベント一覧用 state
  const [events, setEvents] = useState([]);

  // 追加・編集用 state
  const [editingEvent, setEditingEvent] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  // 詳細表示用 state
  const [selectedEvent, setSelectedEvent] = useState(null);

  // 検索用 state
  const [searchInput, setSearchInput] = useState("");
  const [searchStartDateInput, setSearchStartDateInput] = useState("");
  const [searchEndDateInput, setSearchEndDateInput] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [searchStartDate, setSearchStartDate] = useState("");
  const [searchEndDate, setSearchEndDate] = useState("");

 // ソート用 state
  const [sortConfig, setSortConfig] = useState({ key: "date", direction: "asc" });

 // 承認待ちイベント用 state
  const [pendingEvents, setPendingEvents] = useState([
  { 
    id: 101,
    title: "ヨガ教室",
    date: "2025-11-01",
    location: "公民館",
    description: "初心者向けヨガクラスを提案します！",
    url: "",
    applicantName: "山田太郎",
    applicantEmail: "taro@example.com",
    applicantuserName: "taro.yamada"
  }
  ]);

  // 申請中イベント用 state
  const [isProposalOpen, setIsProposalOpen] = useState(false)

  // ログイン処理
  const handleLogin = (username, password) => {
    if (username === "admin" && password === "admin") {
      setUserRole("admin");
      setUsername("admin");
    } else {
      setUserRole("user");
      setUsername(username);
    }
  };
  
  // ゲストログイン処理
  const handleGuest = () => {
    setUserRole("guest");
    setUsername("guest");
  };

  // ログアウト処理
  const handleLogout = () => {
    setUserRole(null);   // ログイン状態解除
    setUsername("");     // ユーザー名クリア
    setMessage("ログアウトしました");
    
    setTimeout(() => setMessage(""), 3000);  // 数秒後に自動で消す
  };
  
  // ログイン画面表示
  if (!userRole) {  // userRoleがnullのときにログイン画面表示
    return (
      <div>
        <Login onLogin={handleLogin} onGuest={handleGuest} />
        {/* ログアウト後はメッセージ表示 */}
        {message && <p style={{ color: "green" }}>{message}</p>}
      </div>
    );
  }

{/*
  // 追加処理
  const addEvent = (newEvent) => {
    setEvents([...events, newEvent]);
    setIsModalOpen(false);
  };

  // 削除処理
  const deleteEvent = (id) => {
    setEvents(events.filter((event) => event.id !== id));
  };

  // 編集開始
  const editEvent = (id) => {
    const event = events.find((e) => e.id === id);
    setEditingEvent(event);
    setIsModalOpen(true);
  };

  // 編集保存
  const saveEvent = (updatedEvent) => {
    setEvents(
      events.map((event) =>
        event.id === updatedEvent.id ? updatedEvent : event
      )
    );
    setEditingEvent(null);
    setIsModalOpen(false);
  };

  // 編集キャンセル
  const cancelEdit = () => {
    setEditingEvent(null);
    setIsModalOpen(false);
  };
*/}

  // フィルタ処理（AND条件＋日付範囲）
  const filteredEvents = events.filter((event) => {
  const matchText =
    event.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    event.location.toLowerCase().includes(searchTerm.toLowerCase());

    const matchStart = searchStartDate
      ? event.date >= searchStartDate
      : true;
    const matchEnd = searchEndDate
      ? event.date <= searchEndDate
      : true;

    return matchText && matchStart && matchEnd;
  });

  // 検索処理
  const handleSearchSubmit = (e) => {
    e.preventDefault();
    setSearchTerm(searchInput);
    setSearchStartDate(searchStartDateInput);
    setSearchEndDate(searchEndDateInput);
  };

  // リセット処理
  const handleReset = () => {
    setSearchInput("");
    setSearchStartDateInput("");
    setSearchEndDateInput("");
    setSearchTerm("");
    setSearchStartDate("");
    setSearchEndDate("");
  };


  // ソート処理
  const sortedEvents = [...filteredEvents].sort((a, b) => {
    const { key, direction } = sortConfig;
    let comparison = 0;

    if (a[key] < b[key]) {
      comparison = -1;
    } else if (a[key] > b[key]) {
      comparison = 1;
    }

    return direction === "asc" ? comparison : -comparison;
  });

  // ソート切替関数
  const handleSort = (key) => {
    setSortConfig((prev) => {
      if (prev.key === key) {
        // 同じ列なら昇順⇔降順を切り替え
        return { key, direction: prev.direction === "asc" ? "desc" : "asc" };
      } else {
        // 別の列を選んだ場合は昇順でスタート
        return { key, direction: "asc" };
      }
    });
  };

  // 詳細を閉じる
  const closeDetail = () => {
    setSelectedEvent(null);
  };

  // 承認処理
  const approveEvent = (id) => {
    const eventToApprove = pendingEvents.find((e) => e.id === id);
    if (!eventToApprove) return;
    setPendingEvents(pendingEvents.filter((e) => e.id !== id));
    setEvents([...events, { ...eventToApprove, status: "approved" }]);
  };

  // 却下処理
  const rejectEvent = (id) => {
    setPendingEvents(pendingEvents.filter((e) => e.id !== id));
  };

  // ソート処理（承認待ち用）
  const sortedPendingEvents = [...pendingEvents].sort((a, b) => {
    const { key, direction } = sortConfig;
    let comparison = 0;

    if (a[key] < b[key]) {
      comparison = -1;
    } else if (a[key] > b[key]) {
      comparison = 1;
    }

    return direction === "asc" ? comparison : -comparison;
  });

  // 申請イベント表示処理
  const proposeEvent = (newEvent) => {
    setPendingEvents([
      ...pendingEvents,
      {
        ...newEvent,
        status: "pending",            // status を必ず pending にする
        applicantuserName: username,  // ログインユーザ名を入れる
      }
    ]);
    setMessage("申請しました！");
    setTimeout(() => setMessage(""), 3000);  // 数秒後に自動で消す
  };




  // ここからUserRoleによって表示画面を変更(1～3)
  if (userRole === "admin") {   // 1. admin 用の画面
    return (
      <div className="p-4">
        {/* ヘッダー部分 */}
        <div className="flex justify-end items-center p-4">
          <h3 className="text-lg font-semibold">{userRole} としてログイン中</h3>
          <button
            onClick={handleLogout}
            className="ml-2.5 bg-gray-500 hover:bg-gray-600 text-white px-3 py-1 rounded"
          >
            ログアウト
          </button>
        </div>

        {/* 検索フォーム */}
        <form
          onSubmit={handleSearchSubmit}
          className="mb-2.5 text-sm scale-90 origin-top-left"
        >
          {/* 名前・場所検索 */}
          <div className="mb-2">
            <input
              type="text"
              placeholder="イベント名や場所で検索"
              value={searchInput}
              onChange={(e) => setSearchInput(e.target.value)}
              className="text-sm p-1 w-[160px] mr-1 border border-gray-500 rounded focus:outline-none focus:border-gray-600"
            />
          </div>

          {/* 日付範囲検索 */}
          <div className="mt-2 border-t pt-2">
            <label className="mr-2">
              開始日:{" "}
              <input
                type="date"
                value={searchStartDateInput}
                onChange={(e) => setSearchStartDateInput(e.target.value)}
                className="text-sm p-1 w-[160px] mr-1 border border-gray-500 rounded focus:outline-none focus:border-gray-600"
              />
            </label>
            <label>
              終了日:{" "}
              <input
                type="date"
                value={searchEndDateInput}
                onChange={(e) => setSearchEndDateInput(e.target.value)}
                className="text-sm p-1 w-[160px] mr-1 border border-gray-500 rounded focus:outline-none focus:border-gray-600"
              />
            </label>
          </div>

          {/* 検索・リセットボタン */}
          <div className="mt-1.5">
            <button
              type="submit"
              className="bg-orange-500 hover:bg-orange-600 text-white text-sm px-2 py-1 rounded"
            >
              検索
            </button>
            <button
              type="button"
              onClick={handleReset}
              className="ml-1.5 bg-gray-400 hover:bg-gray-500 text-white text-sm px-2 py-1 rounded"
            >
              リセット
            </button>
          </div>
        </form>

{/*
        {/* 追加ボタン */}
        <div className="flex justify-end items-center p-4">
          <button
            onClick={() => {
              setEditingEvent(null);
              setIsModalOpen(true);
            }}
            className="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded"
          >
            ＋ イベント追加
          </button>
        </div>
*/}

        {/* イベント一覧 */}
        <section className="mb-10">
          <EventList
           // events={sortedEvents}
            onDelete={deleteEvent}
            onEdit={editEvent}
            onSort={handleSort}
            sortConfig={sortConfig}
            onSelect={setSelectedEvent}
            userRole={userRole}
          />
        </section>

        {/* 追加・編集モーダル */}
        {isModalOpen && (
          <Modal onClose={cancelEdit}>
            <EventForm
              onAddEvent={addEvent}
              onSaveEdit={saveEvent}
              editingEvent={editingEvent}
              onCancel={cancelEdit}
            />
          </Modal>
        )}

        {/* 詳細モーダル */}
        {selectedEvent && (
          <Modal onClose={closeDetail}>
            <div className="space-y-3">
              <h2 className="text-xl font-bold mb-2">{selectedEvent.title}</h2>

              <p>
                <span className="font-semibold">日付:</span> {selectedEvent.date}
              </p>
              <p>
                <span className="font-semibold">場所:</span> {selectedEvent.location}
              </p>

              {selectedEvent.description && (
                <p>
                  <span className="font-semibold">詳細:</span>{" "}
                  {selectedEvent.description}
                </p>
              )}

              {selectedEvent.url && (
                <p>
                  <a
                    href={selectedEvent.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-600 underline hover:text-blue-800"
                  >
                    イベントページを見る
                  </a>
                </p>
              )}

              {selectedEvent.applicantName && (
                <p>
                  <span className="font-semibold">申請者:</span>{" "}
                  {selectedEvent.applicantName}
                </p>
              )}

              {selectedEvent.applicantEmail && (
                <p>
                  <span className="font-semibold">申請者メール:</span>{" "}
                  {selectedEvent.applicantEmail}
                </p>
              )}
            </div>
          </Modal>
        )}

{/*
        {/* 承認待ちイベント一覧 */}
        <section>
          <PendingEventList
            events={sortedPendingEvents}
            onapprove={approveEvent}
            onreject={rejectEvent}
            onSort={handleSort}
            sortConfig={sortConfig}
            onSelect={setSelectedEvent}
            userRole={userRole}
            accountName={username}
          />
        </section>
*/}

      </div>
    );

  } 

{/*
  else if (userRole === "user") {   // 2. user 用の画面
    return (
      <div className="p-4">
        {/* ヘッダー部分 */}
        <div className="flex justify-end items-center p-4">
          <h3 className="text-lg font-semibold">{username} としてログイン中</h3>
          <button
            onClick={handleLogout}
            className="ml-2.5 bg-gray-500 hover:bg-gray-600 text-white px-3 py-1 rounded"
          >
            ログアウト
          </button>
        </div>

        {/* 検索フォーム */}
        <form
          onSubmit={handleSearchSubmit}
          className="mb-2.5 text-sm scale-90 origin-top-left"
        >
          {/* 名前・場所検索 */}
          <div className="mb-2">
            <input
              type="text"
              placeholder="イベント名や場所で検索"
              value={searchInput}
              onChange={(e) => setSearchInput(e.target.value)}
              className="text-sm p-1 w-[160px] mr-1 border border-gray-500 rounded focus:outline-none focus:border-gray-600"
            />
          </div>

          {/* 日付範囲検索 */}
          <div className="mt-2 border-t pt-2">
            <label className="mr-2">
              開始日:{" "}
              <input
                type="date"
                value={searchStartDateInput}
                onChange={(e) => setSearchStartDateInput(e.target.value)}
                className="text-sm p-1 w-[160px] mr-1 border border-gray-500 rounded focus:outline-none focus:border-gray-600"
              />
            </label>
            <label>
              終了日:{" "}
              <input
                type="date"
                value={searchEndDateInput}
                onChange={(e) => setSearchEndDateInput(e.target.value)}
                className="text-sm p-1 w-[160px] mr-1 border border-gray-500 rounded focus:outline-none focus:border-gray-600"
              />
            </label>
          </div>

          {/* 検索・リセットボタン */}
          <div className="mt-1.5">
            <button
              type="submit"
              className="bg-orange-500 hover:bg-orange-600 text-white text-sm px-2 py-1 rounded"
            >
              検索
            </button>
            <button
              type="button"
              onClick={handleReset}
              className="ml-1.5 bg-gray-400 hover:bg-gray-500 text-white text-sm px-2 py-1 rounded"
            >
              リセット
            </button>
          </div>
        </form>

        {/* イベント一覧 */}
        <section className="mb-10">
          <EventList
            events={sortedEvents}
            onDelete={() => {}} // 無効化
            onEdit={() => {}} // 無効化
            onSort={handleSort}
            sortConfig={sortConfig}
            onSelect={setSelectedEvent}
            userRole={userRole}
          />
        </section>

        {/* 詳細モーダル */}
        {selectedEvent && (
          <Modal onClose={closeDetail}>
            <div className="space-y-3">
              <h2 className="text-xl font-bold mb-2">{selectedEvent.title}</h2>

              <p>
                <span className="font-semibold">日付:</span> {selectedEvent.date}
              </p>
              <p>
                <span className="font-semibold">場所:</span> {selectedEvent.location}
              </p>

              {selectedEvent.description && (
                <p>
                  <span className="font-semibold">詳細:</span>{" "}
                  {selectedEvent.description}
                </p>
              )}

              {selectedEvent.url && (
                <p>
                  <a
                    href={selectedEvent.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-600 underline hover:text-blue-800"
                  >
                    イベントページを見る
                  </a>
                </p>
              )}

            </div>
          </Modal>
        )}

        {/* 申請中イベント一覧 */}
        <section>
          <PendingEventList
            events={sortedPendingEvents}
            onapprove={approveEvent}
            onreject={rejectEvent}
            onSort={handleSort}
            sortConfig={sortConfig}
            onSelect={setSelectedEvent}
            userRole={userRole}
            accountName={username}
          />
        </section>

        {/* 申請ボタン */}
        <button
          onClick={() => setIsProposalOpen(true)}
          className="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded"
        >
          ＋ イベント申請
        </button>

        {/* 申請モーダル */}
        {isProposalOpen && (
          <Modal onClose={() => setIsProposalOpen(false)}>
            <EventProposalForm
              onSubmit={proposeEvent}
              onCancel={() => setIsProposalOpen(false)}
            />
          </Modal>
        )}

        {/* 申請完了後のメッセージ */}
        {message && <div style={{ color: "green", marginTop: "10px" }}>{message}</div>}


      </div>
    );
  } else {   // 3. guest 用の画面
    return (
      <div className="p-4">
        {/* ヘッダー部分 */}
        <div className="flex justify-end items-center p-4">        <h3 className="text-lg font-semibold">{userRole} としてログイン中</h3>
          <button
            onClick={handleLogout}
            className="ml-2.5 bg-gray-500 hover:bg-gray-600 text-white px-3 py-1 rounded"
          >
            ログアウト
          </button>
        </div>

        {/* 検索フォーム */}
        <form
          onSubmit={handleSearchSubmit}
          className="mb-2.5 text-sm scale-90 origin-top-left"
        >
          {/* 名前・場所検索 */}
          <div className="mb-2">
            <input
              type="text"
              placeholder="イベント名や場所で検索"
              value={searchInput}
              onChange={(e) => setSearchInput(e.target.value)}
              className="text-sm p-1 w-[160px] mr-1 border border-gray-500 rounded focus:outline-none focus:border-gray-600"
            />
          </div>

          {/* 日付範囲検索 */}
          <div className="mt-2 border-t pt-2">
            <label className="mr-2">
              開始日:{" "}
              <input
                type="date"
                value={searchStartDateInput}
                onChange={(e) => setSearchStartDateInput(e.target.value)}
                className="text-sm p-1 w-[160px] mr-1 border border-gray-500 rounded focus:outline-none focus:border-gray-600"
              />
            </label>
            <label>
              終了日:{" "}
              <input
                type="date"
                value={searchEndDateInput}
                onChange={(e) => setSearchEndDateInput(e.target.value)}
                className="text-sm p-1 w-[160px] mr-1 border border-gray-500 rounded focus:outline-none focus:border-gray-600"
              />
            </label>
          </div>

          {/* 検索・リセットボタン */}
          <div className="mt-1.5">
            <button
              type="submit"
              className="bg-orange-500 hover:bg-orange-600 text-white text-sm px-2 py-1 rounded"
            >
              検索
            </button>
            <button
              type="button"
              onClick={handleReset}
              className="ml-1.5 bg-gray-400 hover:bg-gray-500 text-white text-sm px-2 py-1 rounded"
            >
              リセット
            </button>
          </div>
        </form>

        {/* イベント一覧 */}
        <section className="mb-10">
          <EventList
            events={sortedEvents}
            onDelete={() => {}} // 無効化
            onEdit={() => {}} // 無効化
            onSort={handleSort}
            sortConfig={sortConfig}
            onSelect={setSelectedEvent}
          />
        </section>

        {/* 詳細モーダル */}
        {selectedEvent && (
          <Modal onClose={closeDetail}>
            <div className="space-y-3">
              <h2 className="text-xl font-bold mb-2">{selectedEvent.title}</h2>

              <p>
                <span className="font-semibold">日付:</span> {selectedEvent.date}
              </p>
              <p>
                <span className="font-semibold">場所:</span> {selectedEvent.location}
              </p>

              {selectedEvent.description && (
                <p>
                  <span className="font-semibold">詳細:</span>{" "}
                  {selectedEvent.description}
                </p>
              )}

              {selectedEvent.url && (
                <p>
                  <a
                    href={selectedEvent.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-600 underline hover:text-blue-800"
                  >
                    イベントページを見る
                  </a>
                </p>
              )}

            </div>
          </Modal>
        )}
        
      </div>
    );
  }

*/}

}

export default App;
